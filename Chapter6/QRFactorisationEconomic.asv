function [Q,R] = QRFactorisationEconomic(A)
%   Computes QR-Factorisation of A (A = QR) with the Grahm-Schmidt
%   Algorithm
%   
%   Input:
%           A        : m*n matrix A, m > n
%
%   Output:
%           Q        : m*m orthonormal matrix Q of the QR-Decomposition of A
%           R        : upper triangular matrix R of the QR-Decomposition
%                      of A, R = [Rtide ; 0]
%           
%           
%

    % Initialise
    [m,n] = size(A);
    rank = min(m,n)
    Q = zeros(m,n);
    R = zeros(n);
    Q(1:m,1) = A(1:m,1)
    R(1,1) = 1
    % Iterate
        for k=1:n % iterate over all columns of A
            % Copy all columns of A into k
            Q(:,j) = A(:,j);
            for i=1:j-1 % triangle shape
                R(i,j) = Q(:,j)'*Q(:,i); 
                Q(:,j) = Q(:,j) - R(i,j)'*Q(:,i); % subtract the "direction" of the previous one
            end
            R(j,j) = norm(Q(:,j));
            Q(:,j) = Q(:,j)/R(j,j); % normalise Q colum vector
        end

end  

    
